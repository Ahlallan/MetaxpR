load("G:/In House Screening Analyses/FA project/LIBRARIES/FA Lib - Fluxes/GUO 281117/RAWdat.RData")
View(MyPlt)
library(RODBC)
SERVER='YODA-SERVER'
ID='moldev'; PWD='moldev';MeasurementID=16199; getsite = T; TimeCourse = F
ch = odbcConnect(SERVER, uid = ID, pwd = PWD)
TAB = sqlQuery(ch,"SELECT * FROM information_schema.tables WHERE table_name  LIKE '%MIC%'")
TAB$UNIQUE_ID = as.numeric(gsub('MIC','',TAB$TABLE_NAME))
TAB = TAB[order(TAB$UNIQUE_ID),,drop=F]
if(!any(TAB$UNIQUE_ID==MeasurementID)){
return('No matching analysis in database')
}
View(TAB)
RES = sqlFetch(ch,TAB$TABLE_NAME[which(TAB$UNIQUE_ID==MeasurementID)])
PLATE_ID = RES$PLATE_ID[1]
PLATE_ID
if(getsite){
SITES = sqlQuery(ch,paste('SELECT SITE_ID, X_POSITION, Y_POSITION FROM SITE WHERE PLATE_ID = ',PLATE_ID))
}
if(TimeCourse){
#TIME = sqlQuery(ch,paste('SELECT SERIES_ID, T_INDEX, T_MICROSECONDS FROM SERIES_INFO WHERE SERIES_ID IN ',paste('(',paste(unique(RES$SERIES_ID),collapse=','),')',sep='')))
TIME=data.frame(t(sapply(unique(RES$SERIES_ID),function(x)sqlQuery(ch,paste('SELECT SERIES_ID, T_INDEX, T_MICROSECONDS FROM SERIES_INFO WHERE SERIES_ID IN (',x,')')))))
RES = merge(RES, TIME, by = 'SERIES_ID' )
}
#=====================================================
FEAT = sqlQuery(ch,"SELECT COLUMN_NAME,MEAS_NAME FROM TABLE_COLUMNS WHERE COLUMN_NAME LIKE '%MDCS%'")
odbcClose(ch)
View(FEAT)
FEAT = tapply(as.character(FEAT$MEAS_NAME), FEAT$COLUMN_NAME, function(x)head(x,n=1))
FEAT = data.frame(COLUMN_NAME = names(FEAT), MEAS_NAME = as.character(FEAT))
colnames(RES)[grep('MDCS',colnames(RES))] = gsub('Cell: ','',merge(data.frame(COLUMN_NAME=colnames(RES)[grep('MDCS',colnames(RES))]),FEAT,sort=F)$MEAS_NAME)
RES=RES[,!grepl("SERIES_ID|PRINTED_SPOT_ID|SUBSTANCE_NAME|SETTING_ID|RUN_ID|INSTANCE|WELL_X|WELL_Y",colnames(RES))] #Useless columns...
Types=which(sapply(colnames(RES),function(x)typeof(RES[,x]))!='double')
Types=Types[4:length(Types)]
RES[,Types]=apply(RES[,Types],2,function(x)as.numeric(as.character(x)))
ch = odbcConnect(SERVER, uid = ID, pwd = PWD)
#======================================================
TAB = sqlQuery(ch,"SELECT * FROM information_schema.tables WHERE table_name  LIKE '%MIC%'")
TAB$UNIQUE_ID = as.numeric(gsub('MIC','',TAB$TABLE_NAME))
TAB = TAB[order(TAB$UNIQUE_ID),,drop=F]
if(!any(TAB$UNIQUE_ID==MeasurementID)){
return('No matching analysis in database')
}
#=====================================================
RES = sqlFetch(ch,TAB$TABLE_NAME[which(TAB$UNIQUE_ID==MeasurementID)])
PLATE_ID = RES$PLATE_ID[1]
#=====================================================
if(getsite){
SITES = sqlQuery(ch,paste('SELECT SITE_ID, X_POSITION, Y_POSITION FROM SITE WHERE PLATE_ID = ',PLATE_ID))
}
if(TimeCourse){
#TIME = sqlQuery(ch,paste('SELECT SERIES_ID, T_INDEX, T_MICROSECONDS FROM SERIES_INFO WHERE SERIES_ID IN ',paste('(',paste(unique(RES$SERIES_ID),collapse=','),')',sep='')))
TIME=data.frame(t(sapply(unique(RES$SERIES_ID),function(x)sqlQuery(ch,paste('SELECT SERIES_ID, T_INDEX, T_MICROSECONDS FROM SERIES_INFO WHERE SERIES_ID IN (',x,')')))))
RES = merge(RES, TIME, by = 'SERIES_ID' )
}
#=====================================================
FEAT = sqlQuery(ch,"SELECT COLUMN_NAME,MEAS_NAME FROM TABLE_COLUMNS WHERE COLUMN_NAME LIKE '%MDCS%'")
odbcClose(ch)
View(RES)
FEAT = tapply(as.character(FEAT$MEAS_NAME), FEAT$COLUMN_NAME, function(x)head(x,n=1))
FEAT = data.frame(COLUMN_NAME = names(FEAT), MEAS_NAME = as.character(FEAT))
FEAT
s
odbcClose(ch)
colnames(RES)[grep('MDCS',colnames(RES))]
gsub('Cell: ','',merge(data.frame(COLUMN_NAME=colnames(RES)[grep('MDCS',colnames(RES))]),FEAT,sort=F)$MEAS_NAME)
length(gsub('Cell: ','',merge(data.frame(COLUMN_NAME=colnames(RES)[grep('MDCS',colnames(RES))]),FEAT,sort=F)$MEAS_NAME))
colnames(RES)[grep('MDCS',colnames(RES))]
length(colnames(RES)[grep('MDCS',colnames(RES))])
colnames(RES)[grep('MDCS',colnames(RES))] = gsub('Cell: ','',merge(data.frame(COLUMN_NAME=colnames(RES)[grep('MDCS',colnames(RES))]),FEAT,sort=F)$MEAS_NAME)
View(RES)
RES[,!grepl("SERIES_ID|PRINTED_SPOT_ID|SUBSTANCE_NAME|SETTING_ID|RUN_ID|INSTANCE|WELL_X|WELL_Y",colnames(RES))]
RES=RES[,!grepl("SERIES_ID|PRINTED_SPOT_ID|SUBSTANCE_NAME|SETTING_ID|RUN_ID|INSTANCE|WELL_X|WELL_Y",colnames(RES))] #Useless columns...
Types=which(sapply(colnames(RES),function(x)typeof(RES[,x]))!='double')
Types=Types[4:length(Types)]
Types
apply(RES[,Types],2,function(x)as.numeric(as.character(x)))
if(length(Types)>1){
RES[,Types]=apply(RES[,Types],2,function(x)as.numeric(as.character(x)))
}else{RES[,Types]=as.character(RES[,Types])}
colnames(RES)[1:4] = c('Cell.ID','Site.ID','Well.ID','Plate.ID')
if(TimeCourse){
colnames(RES)=gsub('T_INDEX','TimePoint',colnames(RES))
colnames(RES)=gsub('T_MICROSECONDS','Time.Microseconds',colnames(RES))
RES=RES[order(RES$TimePoint),,drop=F]
}
RES=RES[order(RES$Well.ID), , drop = FALSE]
if(length(RES$ObjectID)!=0){
RES = RES[!is.na(RES$ObjectID),]
}
#====================================================
if(getsite){
RES=merge(RES,SITES,by.x='Site.ID',by.y='SITE_ID')
colnames(RES)[colnames(RES)=='X_POSITION']='Site.X'
colnames(RES)[colnames(RES)=='Y_POSITION']='Site.Y'
Xmax = max(SITES$X_POSITION)
Ymax = max(SITES$Y_POSITION)
Nsites = Xmax*Ymax
RES$Site.ID=RES$Site.X+Xmax*(RES$Site.Y-1)
RES=RES[order(RES$Well.ID,RES$Site.ID),,drop=F]
}
#=========================================
View(RES)
getwd()
setwd('G:\\myGit\\MetaxpR')
library(devtools)
library(roxygen2)
document()
build()
remove.packages('MetaxpR')
install.packages("G:/myGit/MetaxpR_0.4.3.tar.gz", repos = NULL, type = "source")
